function Snake.new 6
push constant 7
call Memory.alloc 1
pop pointer 0
push constant 3
pop this 0
push constant 4
pop this 3
push constant 7
pop this 4
push constant 16
push this 3
call Math.multiply 2
call Array.new 1
pop this 1
push constant 16
push this 3
call Math.multiply 2
pop this 2
push argument 0
pop this 5
push argument 1
pop this 6
push constant 0
pop local 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push constant 28
push local 0
push this 4
call Math.multiply 2
sub
pop local 2
push constant 28
pop local 4
push local 2
push this 4
add
pop local 3
push local 4
push this 4
add
pop local 5
push local 2
push local 4
push local 3
push local 5
call Screen.drawRectangle 4
pop temp 0
push constant 2
push this 3
push constant 1
sub
push local 0
sub
call Math.multiply 2
pop local 1
push constant 2
push local 0
call Math.multiply 2
push this 1
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
push this 1
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Snake.dispose 0
push argument 0
pop pointer 0
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Snake.move 6
push argument 0
pop pointer 0
push constant 2
push this 3
push constant 1
sub
call Math.multiply 2
pop local 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push local 0
push constant 1
add
push this 1
add
pop pointer 1
push that 0
pop local 3
push local 1
push this 4
add
pop local 2
push local 3
push this 4
add
pop local 4
push constant 0
call Screen.setColor 1
pop temp 0
push local 1
push local 3
push local 2
push local 4
call Screen.drawRectangle 4
pop temp 0
label WHILE_EXP0
push local 0
push constant 1
add
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push this 1
add
push local 0
push constant 2
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
push this 1
add
push local 0
push constant 1
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 1
add
pop pointer 1
push that 0
push this 4
add
pop local 2
push local 0
push constant 1
add
push this 1
add
pop pointer 1
push that 0
push this 4
add
pop local 4
push local 0
push constant 2
push this 3
call Math.multiply 2
push constant 1
sub
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push this 1
add
pop pointer 1
push that 0
push local 0
push constant 1
add
push this 1
add
pop pointer 1
push that 0
push local 2
push local 4
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE2
goto IF_END1
label IF_FALSE1
push this 0
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
push this 1
add
pop pointer 1
push that 0
pop local 3
push local 3
push this 4
sub
pop local 3
push constant 1
push this 1
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE3
push this 0
push constant 2
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push local 1
push this 4
add
pop local 1
push constant 0
push this 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE4
push this 0
push constant 3
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 1
push this 1
add
pop pointer 1
push that 0
pop local 3
push local 3
push this 4
add
pop local 3
push constant 1
push this 1
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE5
push this 0
push constant 4
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push local 1
push this 4
sub
pop local 1
push constant 0
push this 1
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE6
push pointer 0
call Snake.checkColl 1
pop local 5
push local 5
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push constant 1
push this 1
add
pop pointer 1
push that 0
pop local 3
push local 1
push this 4
add
pop local 2
push local 3
push this 4
add
pop local 4
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 1
push local 3
push local 2
push local 4
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE7
label IF_END1
push local 0
push constant 2
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Snake.changeDir 0
push argument 0
pop pointer 0
push this 0
push argument 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 1
eq
push argument 1
push constant 3
eq
or
push this 0
push constant 2
eq
push this 0
push constant 4
eq
or
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
pop this 0
push constant 0
return
label IF_FALSE1
push argument 1
push constant 2
eq
push argument 1
push constant 4
eq
or
push this 0
push constant 1
eq
push this 0
push constant 3
eq
or
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
pop this 0
push constant 0
return
label IF_FALSE2
push constant 0
return
function Snake.giveHeadX 0
push argument 0
pop pointer 0
push constant 0
push this 1
add
pop pointer 1
push that 0
return
function Snake.giveHeadY 0
push argument 0
pop pointer 0
push constant 1
push this 1
add
pop pointer 1
push that 0
return
function Snake.getFat 4
push argument 0
pop pointer 0
push this 3
push constant 2
call Math.multiply 2
push this 2
push constant 2
sub
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
push this 2
call Math.multiply 2
pop local 1
push local 1
call Array.new 1
pop local 0
push local 1
push constant 1
sub
push local 0
add
push local 1
push constant 3
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 2
sub
push local 0
add
push local 1
push constant 4
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 3
sub
pop local 3
label WHILE_EXP0
push local 3
push constant 0
gt
push local 3
push constant 0
eq
or
not
if-goto WHILE_END0
push local 3
push local 0
add
push local 3
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 3
push this 1
call Array.dispose 1
pop temp 0
push local 1
call Array.new 1
pop this 1
label WHILE_EXP1
push local 3
push local 1
lt
not
if-goto WHILE_END1
push local 3
push this 1
add
push local 3
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 0
call Array.dispose 1
pop temp 0
push this 3
push constant 1
add
pop this 3
push local 1
pop this 2
push constant 0
return
goto IF_END0
label IF_FALSE0
push this 3
push constant 1
add
pop this 3
push constant 2
push this 3
call Math.multiply 2
push constant 1
sub
push this 1
add
push constant 2
push this 3
call Math.multiply 2
push constant 3
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 3
call Math.multiply 2
push constant 2
sub
push this 1
add
push constant 2
push this 3
call Math.multiply 2
push constant 4
sub
push this 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Snake.checkColl 2
push argument 0
pop pointer 0
push constant 2
pop local 0
push constant 0
push this 1
add
pop pointer 1
push that 0
push constant 0
lt
push constant 0
push this 1
add
pop pointer 1
push that 0
push this 5
push this 4
sub
gt
or
push constant 1
push this 1
add
pop pointer 1
push that 0
push constant 0
lt
or
push constant 1
push this 1
add
pop pointer 1
push that 0
push this 6
push this 4
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
label WHILE_EXP0
push local 0
push constant 2
push this 3
call Math.multiply 2
lt
not
if-goto WHILE_END0
push constant 0
push this 1
add
pop pointer 1
push that 0
push local 0
push this 1
add
pop pointer 1
push that 0
eq
push constant 1
push this 1
add
pop pointer 1
push that 0
push local 0
push constant 1
add
push this 1
add
pop pointer 1
push that 0
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push local 0
push constant 2
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
